{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhat singh\\\\Downloads\\\\Best_Project\\\\frontend\\\\src\\\\AppWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport App from \"./App\"; // The main app component\nimport Auth from \"./Auth\"; // The login/signup component\nimport \"./app.css\"; // Your main stylesheet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction AppWrapper() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // Prevents a flicker on load\n\n  // Check if the user is already logged in from a previous session\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"moodmateUser\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n  const handleLogin = userData => {\n    // This function is passed to the Auth component.\n    // It receives the user data from the backend upon successful login.\n    setUser(userData);\n    localStorage.setItem(\"moodmateUser\", JSON.stringify(userData));\n  };\n  const handleLogout = () => {\n    // This function is passed to the main App component.\n    setUser(null);\n    localStorage.removeItem(\"moodmateUser\");\n    // Optional: Notify the backend that the user has logged out\n    fetch(`${API_BASE_URL}/api/logout`, {\n      method: 'POST',\n      credentials: 'include'\n    });\n  };\n\n  // Show a simple loading indicator while checking for a stored user\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF19\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If there is a logged-in user, show the main App.\n  // Otherwise, show the Auth component.\n  if (user) {\n    return /*#__PURE__*/_jsxDEV(App, {\n      user: user,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n}\n_s(AppWrapper, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AppWrapper;\nexport default AppWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useEffect","App","Auth","jsxDEV","_jsxDEV","API_BASE_URL","AppWrapper","_s","user","setUser","isLoading","setIsLoading","storedUser","localStorage","getItem","JSON","parse","handleLogin","userData","setItem","stringify","handleLogout","removeItem","fetch","method","credentials","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogout","onLogin","_c","$RefreshReg$"],"sources":["C:/Users/Prabhat singh/Downloads/Best_Project/frontend/src/AppWrapper.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";      // The main app component\r\nimport Auth from \"./Auth\";    // The login/signup component\r\nimport \"./app.css\";         // Your main stylesheet\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nfunction AppWrapper() {\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true); // Prevents a flicker on load\r\n\r\n    // Check if the user is already logged in from a previous session\r\n    useEffect(() => {\r\n        const storedUser = localStorage.getItem(\"moodmateUser\");\r\n        if (storedUser) {\r\n            setUser(JSON.parse(storedUser));\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    const handleLogin = (userData) => {\r\n        // This function is passed to the Auth component.\r\n        // It receives the user data from the backend upon successful login.\r\n        setUser(userData);\r\n        localStorage.setItem(\"moodmateUser\", JSON.stringify(userData));\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        // This function is passed to the main App component.\r\n        setUser(null);\r\n        localStorage.removeItem(\"moodmateUser\");\r\n        // Optional: Notify the backend that the user has logged out\r\n        fetch(`${API_BASE_URL}/api/logout`, { method: 'POST', credentials: 'include' });\r\n    };\r\n\r\n    // Show a simple loading indicator while checking for a stored user\r\n    if (isLoading) {\r\n        return <div className=\"loading-screen\"><h1>ðŸŒ™</h1></div>;\r\n    }\r\n\r\n    // If there is a logged-in user, show the main App.\r\n    // Otherwise, show the Auth component.\r\n    if (user) {\r\n        return <App user={user} onLogout={handleLogout} />;\r\n    } else {\r\n        return <Auth onLogin={handleLogin} />;\r\n    }\r\n}\r\n\r\nexport default AppWrapper;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO,CAAC,CAAM;AAC9B,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAI;AAC9B,OAAO,WAAW,CAAC,CAAS;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIF,UAAU,EAAE;MACZH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACnC;IACAD,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,WAAW,GAAIC,QAAQ,IAAK;IAC9B;IACA;IACAT,OAAO,CAACS,QAAQ,CAAC;IACjBL,YAAY,CAACM,OAAO,CAAC,cAAc,EAAEJ,IAAI,CAACK,SAAS,CAACF,QAAQ,CAAC,CAAC;EAClE,CAAC;EAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACvB;IACAZ,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACS,UAAU,CAAC,cAAc,CAAC;IACvC;IACAC,KAAK,CAAC,GAAGlB,YAAY,aAAa,EAAE;MAAEmB,MAAM,EAAE,MAAM;MAAEC,WAAW,EAAE;IAAU,CAAC,CAAC;EACnF,CAAC;;EAED;EACA,IAAIf,SAAS,EAAE;IACX,oBAAON,OAAA;MAAKsB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAACvB,OAAA;QAAAuB,QAAA,EAAI;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5D;;EAEA;EACA;EACA,IAAIvB,IAAI,EAAE;IACN,oBAAOJ,OAAA,CAACH,GAAG;MAACO,IAAI,EAAEA,IAAK;MAACwB,QAAQ,EAAEX;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtD,CAAC,MAAM;IACH,oBAAO3B,OAAA,CAACF,IAAI;MAAC+B,OAAO,EAAEhB;IAAY;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;AACJ;AAACxB,EAAA,CAxCQD,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AA0CnB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}