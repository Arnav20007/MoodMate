{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhat singh\\\\Downloads\\\\Best_Project\\\\frontend\\\\src\\\\AppWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport App from './App';\nimport Auth from './Auth';\nimport EmailVerification from './components/EmailVerification';\nimport PasswordReset from './components/PasswordReset';\n\n// Mock API service (replace with actual API calls)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authService = {\n  async login(email, password) {\n    // Simulate API call\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email && password) {\n          resolve({\n            user: {\n              id: Date.now(),\n              email,\n              name: email.split('@')[0],\n              coins: 100,\n              streak: 5,\n              mentalFitness: 85,\n              emailVerified: true\n            },\n            tokens: {\n              access: 'mock-access-token',\n              refresh: 'mock-refresh-token'\n            }\n          });\n        } else {\n          reject(new Error('Invalid credentials'));\n        }\n      }, 1000);\n    });\n  },\n  async signup(userData) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userData.email && userData.password) {\n          resolve({\n            user: {\n              id: Date.now(),\n              email: userData.email,\n              name: userData.name,\n              coins: 50,\n              streak: 1,\n              mentalFitness: 75,\n              emailVerified: false\n            },\n            tokens: {\n              access: 'mock-access-token',\n              refresh: 'mock-refresh-token'\n            }\n          });\n        } else {\n          reject(new Error('Invalid user data'));\n        }\n      }, 1000);\n    });\n  },\n  async sendVerificationEmail() {\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        success: true\n      }), 1000);\n    });\n  },\n  async verifyEmail(token) {\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        success: true\n      }), 1000);\n    });\n  },\n  async sendPasswordResetEmail(email) {\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        success: true\n      }), 1000);\n    });\n  },\n  async resetPassword(token, newPassword) {\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        success: true\n      }), 1000);\n    });\n  },\n  async refreshToken(refreshToken) {\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        access: 'new-mock-access-token',\n        refresh: 'new-mock-refresh-token'\n      }), 1000);\n    });\n  }\n};\nconst AppWrapper = () => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isAuthenticated: false,\n    user: null,\n    loading: true,\n    requiresVerification: false,\n    showPasswordReset: false,\n    verificationEmailSent: false\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    checkExistingSession();\n  }, []);\n  const checkExistingSession = async () => {\n    try {\n      const savedUser = localStorage.getItem('moodMateUser');\n      const savedTokens = localStorage.getItem('moodMateTokens');\n      if (savedUser && savedTokens) {\n        const user = JSON.parse(savedUser);\n        const tokens = JSON.parse(savedTokens);\n\n        // Verify token validity (in real app, this would be an API call)\n        const isValid = await validateToken(tokens.access);\n        if (isValid) {\n          setAuthState(prev => ({\n            ...prev,\n            isAuthenticated: true,\n            user,\n            loading: false\n          }));\n          loadUserData(user.id);\n        } else {\n          // Try to refresh token\n          try {\n            const newTokens = await authService.refreshToken(tokens.refresh);\n            localStorage.setItem('moodMateTokens', JSON.stringify(newTokens));\n            setAuthState(prev => ({\n              ...prev,\n              isAuthenticated: true,\n              user,\n              loading: false\n            }));\n            loadUserData(user.id);\n          } catch (error) {\n            // Token refresh failed, logout user\n            handleLogout();\n          }\n        }\n      } else {\n        setAuthState(prev => ({\n          ...prev,\n          loading: false\n        }));\n      }\n    } catch (error) {\n      console.error('Session check failed:', error);\n      setAuthState(prev => ({\n        ...prev,\n        loading: false\n      }));\n    }\n  };\n  const validateToken = async token => {\n    // Mock validation - in real app, this would verify with your backend\n    return new Promise(resolve => {\n      setTimeout(() => resolve(true), 500);\n    });\n  };\n  const loadUserData = async userId => {\n    try {\n      // Load chat history and other user-specific data\n      const savedChats = localStorage.getItem(`moodMateChats_${userId}`);\n      if (savedChats) {\n        setChatHistory(JSON.parse(savedChats));\n      }\n\n      // Load other user preferences, settings, etc.\n      const userSettings = localStorage.getItem(`moodMateSettings_${userId}`);\n      // Apply user settings if needed\n    } catch (error) {\n      console.error('Failed to load user data:', error);\n    }\n  };\n  const handleLogin = async credentials => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      const response = await authService.login(credentials.email, credentials.password);\n      if (response.user.emailVerified) {\n        // Save user data and tokens\n        localStorage.setItem('moodMateUser', JSON.stringify(response.user));\n        localStorage.setItem('moodMateTokens', JSON.stringify(response.tokens));\n        setAuthState(prev => ({\n          ...prev,\n          isAuthenticated: true,\n          user: response.user,\n          loading: false,\n          requiresVerification: false\n        }));\n        loadUserData(response.user.id);\n      } else {\n        // Email not verified\n        setAuthState(prev => ({\n          ...prev,\n          requiresVerification: true,\n          user: response.user,\n          loading: false\n        }));\n      }\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleSignup = async userData => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      const response = await authService.signup(userData);\n\n      // Save user data temporarily\n      localStorage.setItem('moodMateUser', JSON.stringify(response.user));\n      localStorage.setItem('moodMateTokens', JSON.stringify(response.tokens));\n      if (response.user.emailVerified) {\n        setAuthState(prev => ({\n          ...prev,\n          isAuthenticated: true,\n          user: response.user,\n          loading: false\n        }));\n        loadUserData(response.user.id);\n      } else {\n        // Send verification email\n        await authService.sendVerificationEmail();\n        setAuthState(prev => ({\n          ...prev,\n          requiresVerification: true,\n          user: response.user,\n          loading: false,\n          verificationEmailSent: true\n        }));\n      }\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleVerifyEmail = async token => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      const response = await authService.verifyEmail(token);\n      if (response.success) {\n        // Update user as verified\n        const updatedUser = {\n          ...authState.user,\n          emailVerified: true\n        };\n        localStorage.setItem('moodMateUser', JSON.stringify(updatedUser));\n        setAuthState(prev => ({\n          ...prev,\n          isAuthenticated: true,\n          user: updatedUser,\n          loading: false,\n          requiresVerification: false\n        }));\n        loadUserData(updatedUser.id);\n      }\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleResendVerification = async () => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      await authService.sendVerificationEmail();\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        verificationEmailSent: true\n      }));\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleForgotPassword = async email => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      await authService.sendPasswordResetEmail(email);\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        showPasswordReset: true,\n        message: 'Password reset instructions sent to your email'\n      }));\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleResetPassword = async (token, newPassword) => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      await authService.resetPassword(token, newPassword);\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        showPasswordReset: false,\n        message: 'Password reset successfully. You can now login with your new password.'\n      }));\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleSocialLogin = async provider => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true\n      }));\n\n      // Simulate social login - in real app, this would redirect to OAuth provider\n      const response = await authService.login(`social-${provider}@example.com`, 'social-login');\n      localStorage.setItem('moodMateUser', JSON.stringify(response.user));\n      localStorage.setItem('moodMateTokens', JSON.stringify(response.tokens));\n      setAuthState(prev => ({\n        ...prev,\n        isAuthenticated: true,\n        user: response.user,\n        loading: false\n      }));\n      loadUserData(response.user.id);\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n    }\n  };\n  const handleLogout = () => {\n    // Clear all stored data\n    localStorage.removeItem('moodMateUser');\n    localStorage.removeItem('moodMateTokens');\n    if (authState.user) {\n      localStorage.removeItem(`moodMateChats_${authState.user.id}`);\n      localStorage.removeItem(`moodMateSettings_${authState.user.id}`);\n    }\n    setAuthState({\n      isAuthenticated: false,\n      user: null,\n      loading: false,\n      requiresVerification: false,\n      showPasswordReset: false,\n      verificationEmailSent: false\n    });\n    setChatHistory([]);\n    setCurrentChat(null);\n  };\n  const updateChatHistory = chat => {\n    setChatHistory(prev => {\n      const existingIndex = prev.findIndex(c => c.id === chat.id);\n      let updatedHistory;\n      if (existingIndex >= 0) {\n        updatedHistory = [...prev];\n        updatedHistory[existingIndex] = chat;\n      } else {\n        updatedHistory = [chat, ...prev].slice(0, 50); // Keep last 50 chats\n      }\n\n      // Save to user-specific storage\n      if (authState.user) {\n        localStorage.setItem(`moodMateChats_${authState.user.id}`, JSON.stringify(updatedHistory));\n      }\n      return updatedHistory;\n    });\n  };\n  const startNewChat = () => {\n    const newChat = {\n      id: Date.now(),\n      title: \"New Chat\",\n      messages: [{\n        id: Date.now(),\n        text: \"Hello! I'm MoodMate, your mental health companion. How are you feeling today?\",\n        sender: \"bot\",\n        timestamp: new Date().toISOString()\n      }],\n      timestamp: new Date().toISOString(),\n      preview: \"Start a new conversation...\"\n    };\n    setCurrentChat(newChat);\n    updateChatHistory(newChat);\n    return newChat;\n  };\n  const loadChat = chatId => {\n    const chat = chatHistory.find(c => c.id === chatId);\n    if (chat) {\n      setCurrentChat(chat);\n    }\n  };\n  const deleteChat = chatId => {\n    setChatHistory(prev => {\n      const updatedHistory = prev.filter(chat => chat.id !== chatId);\n      if (authState.user) {\n        localStorage.setItem(`moodMateChats_${authState.user.id}`, JSON.stringify(updatedHistory));\n      }\n      return updatedHistory;\n    });\n    if (currentChat && currentChat.id === chatId) {\n      setCurrentChat(null);\n    }\n  };\n  if (authState.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this);\n  }\n  if (authState.requiresVerification) {\n    return /*#__PURE__*/_jsxDEV(EmailVerification, {\n      user: authState.user,\n      onVerify: handleVerifyEmail,\n      onResend: handleResendVerification,\n      emailSent: authState.verificationEmailSent,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this);\n  }\n  if (authState.showPasswordReset) {\n    return /*#__PURE__*/_jsxDEV(PasswordReset, {\n      onSubmit: handleResetPassword,\n      onBack: () => setAuthState(prev => ({\n        ...prev,\n        showPasswordReset: false\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this);\n  }\n  if (!authState.isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onLogin: handleLogin,\n      onSignup: handleSignup,\n      onForgotPassword: handleForgotPassword,\n      onSocialLogin: handleSocialLogin,\n      error: authState.error,\n      message: authState.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(App, {\n    user: authState.user,\n    onLogout: handleLogout,\n    chatHistory: chatHistory,\n    currentChat: currentChat,\n    onNewChat: startNewChat,\n    onLoadChat: loadChat,\n    onDeleteChat: deleteChat,\n    onUpdateChat: updateChatHistory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 510,\n    columnNumber: 5\n  }, this);\n};\n_s(AppWrapper, \"kkXtoRzdSXtbZANo9UTmXwXYv3I=\");\n_c = AppWrapper;\nexport default AppWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useEffect","App","Auth","EmailVerification","PasswordReset","jsxDEV","_jsxDEV","authService","login","email","password","Promise","resolve","reject","setTimeout","user","id","Date","now","name","split","coins","streak","mentalFitness","emailVerified","tokens","access","refresh","Error","signup","userData","sendVerificationEmail","success","verifyEmail","token","sendPasswordResetEmail","resetPassword","newPassword","refreshToken","AppWrapper","_s","authState","setAuthState","isAuthenticated","loading","requiresVerification","showPasswordReset","verificationEmailSent","chatHistory","setChatHistory","currentChat","setCurrentChat","checkExistingSession","savedUser","localStorage","getItem","savedTokens","JSON","parse","isValid","validateToken","prev","loadUserData","newTokens","setItem","stringify","error","handleLogout","console","userId","savedChats","userSettings","handleLogin","credentials","response","message","handleSignup","handleVerifyEmail","updatedUser","handleResendVerification","handleForgotPassword","handleResetPassword","handleSocialLogin","provider","removeItem","updateChatHistory","chat","existingIndex","findIndex","c","updatedHistory","slice","startNewChat","newChat","title","messages","text","sender","timestamp","toISOString","preview","loadChat","chatId","find","deleteChat","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onVerify","onResend","emailSent","onLogout","onSubmit","onBack","onLogin","onSignup","onForgotPassword","onSocialLogin","onNewChat","onLoadChat","onDeleteChat","onUpdateChat","_c","$RefreshReg$"],"sources":["C:/Users/Prabhat singh/Downloads/Best_Project/frontend/src/AppWrapper.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport App from './App';\r\nimport Auth from './Auth';\r\nimport EmailVerification from './components/EmailVerification';\r\nimport PasswordReset from './components/PasswordReset';\r\n\r\n// Mock API service (replace with actual API calls)\r\nconst authService = {\r\n  async login(email, password) {\r\n    // Simulate API call\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (email && password) {\r\n          resolve({\r\n            user: {\r\n              id: Date.now(),\r\n              email,\r\n              name: email.split('@')[0],\r\n              coins: 100,\r\n              streak: 5,\r\n              mentalFitness: 85,\r\n              emailVerified: true\r\n            },\r\n            tokens: {\r\n              access: 'mock-access-token',\r\n              refresh: 'mock-refresh-token'\r\n            }\r\n          });\r\n        } else {\r\n          reject(new Error('Invalid credentials'));\r\n        }\r\n      }, 1000);\r\n    });\r\n  },\r\n\r\n  async signup(userData) {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (userData.email && userData.password) {\r\n          resolve({\r\n            user: {\r\n              id: Date.now(),\r\n              email: userData.email,\r\n              name: userData.name,\r\n              coins: 50,\r\n              streak: 1,\r\n              mentalFitness: 75,\r\n              emailVerified: false\r\n            },\r\n            tokens: {\r\n              access: 'mock-access-token',\r\n              refresh: 'mock-refresh-token'\r\n            }\r\n          });\r\n        } else {\r\n          reject(new Error('Invalid user data'));\r\n        }\r\n      }, 1000);\r\n    });\r\n  },\r\n\r\n  async sendVerificationEmail() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve({ success: true }), 1000);\r\n    });\r\n  },\r\n\r\n  async verifyEmail(token) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve({ success: true }), 1000);\r\n    });\r\n  },\r\n\r\n  async sendPasswordResetEmail(email) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve({ success: true }), 1000);\r\n    });\r\n  },\r\n\r\n  async resetPassword(token, newPassword) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve({ success: true }), 1000);\r\n    });\r\n  },\r\n\r\n  async refreshToken(refreshToken) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve({\r\n        access: 'new-mock-access-token',\r\n        refresh: 'new-mock-refresh-token'\r\n      }), 1000);\r\n    });\r\n  }\r\n};\r\n\r\nconst AppWrapper = () => {\r\n  const [authState, setAuthState] = useState({\r\n    isAuthenticated: false,\r\n    user: null,\r\n    loading: true,\r\n    requiresVerification: false,\r\n    showPasswordReset: false,\r\n    verificationEmailSent: false\r\n  });\r\n\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n\r\n  // Check for existing session on mount\r\n  useEffect(() => {\r\n    checkExistingSession();\r\n  }, []);\r\n\r\n  const checkExistingSession = async () => {\r\n    try {\r\n      const savedUser = localStorage.getItem('moodMateUser');\r\n      const savedTokens = localStorage.getItem('moodMateTokens');\r\n      \r\n      if (savedUser && savedTokens) {\r\n        const user = JSON.parse(savedUser);\r\n        const tokens = JSON.parse(savedTokens);\r\n        \r\n        // Verify token validity (in real app, this would be an API call)\r\n        const isValid = await validateToken(tokens.access);\r\n        \r\n        if (isValid) {\r\n          setAuthState(prev => ({\r\n            ...prev,\r\n            isAuthenticated: true,\r\n            user,\r\n            loading: false\r\n          }));\r\n          loadUserData(user.id);\r\n        } else {\r\n          // Try to refresh token\r\n          try {\r\n            const newTokens = await authService.refreshToken(tokens.refresh);\r\n            localStorage.setItem('moodMateTokens', JSON.stringify(newTokens));\r\n            setAuthState(prev => ({\r\n              ...prev,\r\n              isAuthenticated: true,\r\n              user,\r\n              loading: false\r\n            }));\r\n            loadUserData(user.id);\r\n          } catch (error) {\r\n            // Token refresh failed, logout user\r\n            handleLogout();\r\n          }\r\n        }\r\n      } else {\r\n        setAuthState(prev => ({ ...prev, loading: false }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Session check failed:', error);\r\n      setAuthState(prev => ({ ...prev, loading: false }));\r\n    }\r\n  };\r\n\r\n  const validateToken = async (token) => {\r\n    // Mock validation - in real app, this would verify with your backend\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve(true), 500);\r\n    });\r\n  };\r\n\r\n  const loadUserData = async (userId) => {\r\n    try {\r\n      // Load chat history and other user-specific data\r\n      const savedChats = localStorage.getItem(`moodMateChats_${userId}`);\r\n      if (savedChats) {\r\n        setChatHistory(JSON.parse(savedChats));\r\n      }\r\n      \r\n      // Load other user preferences, settings, etc.\r\n      const userSettings = localStorage.getItem(`moodMateSettings_${userId}`);\r\n      // Apply user settings if needed\r\n    } catch (error) {\r\n      console.error('Failed to load user data:', error);\r\n    }\r\n  };\r\n\r\n  const handleLogin = async (credentials) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      const response = await authService.login(credentials.email, credentials.password);\r\n      \r\n      if (response.user.emailVerified) {\r\n        // Save user data and tokens\r\n        localStorage.setItem('moodMateUser', JSON.stringify(response.user));\r\n        localStorage.setItem('moodMateTokens', JSON.stringify(response.tokens));\r\n        \r\n        setAuthState(prev => ({\r\n          ...prev,\r\n          isAuthenticated: true,\r\n          user: response.user,\r\n          loading: false,\r\n          requiresVerification: false\r\n        }));\r\n        \r\n        loadUserData(response.user.id);\r\n      } else {\r\n        // Email not verified\r\n        setAuthState(prev => ({\r\n          ...prev,\r\n          requiresVerification: true,\r\n          user: response.user,\r\n          loading: false\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSignup = async (userData) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      const response = await authService.signup(userData);\r\n      \r\n      // Save user data temporarily\r\n      localStorage.setItem('moodMateUser', JSON.stringify(response.user));\r\n      localStorage.setItem('moodMateTokens', JSON.stringify(response.tokens));\r\n      \r\n      if (response.user.emailVerified) {\r\n        setAuthState(prev => ({\r\n          ...prev,\r\n          isAuthenticated: true,\r\n          user: response.user,\r\n          loading: false\r\n        }));\r\n        \r\n        loadUserData(response.user.id);\r\n      } else {\r\n        // Send verification email\r\n        await authService.sendVerificationEmail();\r\n        \r\n        setAuthState(prev => ({\r\n          ...prev,\r\n          requiresVerification: true,\r\n          user: response.user,\r\n          loading: false,\r\n          verificationEmailSent: true\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleVerifyEmail = async (token) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      const response = await authService.verifyEmail(token);\r\n      \r\n      if (response.success) {\r\n        // Update user as verified\r\n        const updatedUser = { ...authState.user, emailVerified: true };\r\n        localStorage.setItem('moodMateUser', JSON.stringify(updatedUser));\r\n        \r\n        setAuthState(prev => ({\r\n          ...prev,\r\n          isAuthenticated: true,\r\n          user: updatedUser,\r\n          loading: false,\r\n          requiresVerification: false\r\n        }));\r\n        \r\n        loadUserData(updatedUser.id);\r\n      }\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleResendVerification = async () => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      await authService.sendVerificationEmail();\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        verificationEmailSent: true\r\n      }));\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleForgotPassword = async (email) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      await authService.sendPasswordResetEmail(email);\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        showPasswordReset: true,\r\n        message: 'Password reset instructions sent to your email'\r\n      }));\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async (token, newPassword) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      await authService.resetPassword(token, newPassword);\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        showPasswordReset: false,\r\n        message: 'Password reset successfully. You can now login with your new password.'\r\n      }));\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSocialLogin = async (provider) => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true }));\r\n      \r\n      // Simulate social login - in real app, this would redirect to OAuth provider\r\n      const response = await authService.login(`social-${provider}@example.com`, 'social-login');\r\n      \r\n      localStorage.setItem('moodMateUser', JSON.stringify(response.user));\r\n      localStorage.setItem('moodMateTokens', JSON.stringify(response.tokens));\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isAuthenticated: true,\r\n        user: response.user,\r\n        loading: false\r\n      }));\r\n      \r\n      loadUserData(response.user.id);\r\n    } catch (error) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    // Clear all stored data\r\n    localStorage.removeItem('moodMateUser');\r\n    localStorage.removeItem('moodMateTokens');\r\n    \r\n    if (authState.user) {\r\n      localStorage.removeItem(`moodMateChats_${authState.user.id}`);\r\n      localStorage.removeItem(`moodMateSettings_${authState.user.id}`);\r\n    }\r\n    \r\n    setAuthState({\r\n      isAuthenticated: false,\r\n      user: null,\r\n      loading: false,\r\n      requiresVerification: false,\r\n      showPasswordReset: false,\r\n      verificationEmailSent: false\r\n    });\r\n    \r\n    setChatHistory([]);\r\n    setCurrentChat(null);\r\n  };\r\n\r\n  const updateChatHistory = (chat) => {\r\n    setChatHistory(prev => {\r\n      const existingIndex = prev.findIndex(c => c.id === chat.id);\r\n      let updatedHistory;\r\n      \r\n      if (existingIndex >= 0) {\r\n        updatedHistory = [...prev];\r\n        updatedHistory[existingIndex] = chat;\r\n      } else {\r\n        updatedHistory = [chat, ...prev].slice(0, 50); // Keep last 50 chats\r\n      }\r\n      \r\n      // Save to user-specific storage\r\n      if (authState.user) {\r\n        localStorage.setItem(`moodMateChats_${authState.user.id}`, JSON.stringify(updatedHistory));\r\n      }\r\n      \r\n      return updatedHistory;\r\n    });\r\n  };\r\n\r\n  const startNewChat = () => {\r\n    const newChat = {\r\n      id: Date.now(),\r\n      title: \"New Chat\",\r\n      messages: [{\r\n        id: Date.now(),\r\n        text: \"Hello! I'm MoodMate, your mental health companion. How are you feeling today?\",\r\n        sender: \"bot\",\r\n        timestamp: new Date().toISOString()\r\n      }],\r\n      timestamp: new Date().toISOString(),\r\n      preview: \"Start a new conversation...\"\r\n    };\r\n    \r\n    setCurrentChat(newChat);\r\n    updateChatHistory(newChat);\r\n    return newChat;\r\n  };\r\n\r\n  const loadChat = (chatId) => {\r\n    const chat = chatHistory.find(c => c.id === chatId);\r\n    if (chat) {\r\n      setCurrentChat(chat);\r\n    }\r\n  };\r\n\r\n  const deleteChat = (chatId) => {\r\n    setChatHistory(prev => {\r\n      const updatedHistory = prev.filter(chat => chat.id !== chatId);\r\n      \r\n      if (authState.user) {\r\n        localStorage.setItem(`moodMateChats_${authState.user.id}`, JSON.stringify(updatedHistory));\r\n      }\r\n      \r\n      return updatedHistory;\r\n    });\r\n    \r\n    if (currentChat && currentChat.id === chatId) {\r\n      setCurrentChat(null);\r\n    }\r\n  };\r\n\r\n  if (authState.loading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (authState.requiresVerification) {\r\n    return (\r\n      <EmailVerification\r\n        user={authState.user}\r\n        onVerify={handleVerifyEmail}\r\n        onResend={handleResendVerification}\r\n        emailSent={authState.verificationEmailSent}\r\n        onLogout={handleLogout}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (authState.showPasswordReset) {\r\n    return (\r\n      <PasswordReset\r\n        onSubmit={handleResetPassword}\r\n        onBack={() => setAuthState(prev => ({ ...prev, showPasswordReset: false }))}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (!authState.isAuthenticated) {\r\n    return (\r\n      <Auth\r\n        onLogin={handleLogin}\r\n        onSignup={handleSignup}\r\n        onForgotPassword={handleForgotPassword}\r\n        onSocialLogin={handleSocialLogin}\r\n        error={authState.error}\r\n        message={authState.message}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <App \r\n      user={authState.user}\r\n      onLogout={handleLogout}\r\n      chatHistory={chatHistory}\r\n      currentChat={currentChat}\r\n      onNewChat={startNewChat}\r\n      onLoadChat={loadChat}\r\n      onDeleteChat={deleteChat}\r\n      onUpdateChat={updateChatHistory}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AppWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}