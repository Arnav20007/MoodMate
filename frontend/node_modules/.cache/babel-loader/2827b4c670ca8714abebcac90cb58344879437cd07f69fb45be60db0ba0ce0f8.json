{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhat singh\\\\Downloads\\\\Best_Project\\\\frontend\\\\src\\\\components\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nfunction Chat({\n  user\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const chatEndRef = useRef(null);\n  const messagesContainerRef = useRef(null);\n\n  // Set the initial welcome message when the component loads\n  useEffect(() => {\n    if (user && user.username) {\n      setMessages([{\n        id: Date.now(),\n        text: `Hello ${user.username}! I'm MoodMate. How can I help you today?`,\n        sender: 'bot'\n      }]);\n    }\n  }, [user]);\n\n  // Automatically scroll to the latest message\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages, isTyping]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const botMessage = {\n        id: Date.now() + 1,\n        text: data.reply,\n        sender: 'bot'\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      const errorMsg = {\n        id: Date.now() + 1,\n        text: \"Sorry, I couldn't process your request. Please try again.\",\n        sender: 'bot'\n      };\n      setMessages(prev => [...prev, errorMsg]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header-avatar\",\n        children: \"M\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"MoodMate Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Always here to listen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-container\",\n        ref: messagesContainerRef,\n        children: [messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatEndRef,\n          className: \"scroll-anchor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message...\",\n        disabled: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: isTyping || !input.trim(),\n        className: \"send-btn\",\n        children: isTyping ? '...' : 'âž¤'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"3UJ428Q/3KGbOwJI/pG4IDy/1Fw=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_BASE_URL","Chat","user","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","chatEndRef","messagesContainerRef","username","id","Date","now","text","sender","current","scrollIntoView","behavior","sendMessage","trim","userMessage","prev","response","fetch","method","headers","credentials","body","JSON","stringify","message","ok","Error","status","data","json","botMessage","reply","error","console","errorMsg","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","type","value","onChange","target","onKeyPress","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Prabhat singh/Downloads/Best_Project/frontend/src/components/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chat.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nfunction Chat({ user }) {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState(\"\");\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const chatEndRef = useRef(null);\r\n    const messagesContainerRef = useRef(null);\r\n\r\n    // Set the initial welcome message when the component loads\r\n    useEffect(() => {\r\n        if (user && user.username) {\r\n            setMessages([{\r\n                id: Date.now(),\r\n                text: `Hello ${user.username}! I'm MoodMate. How can I help you today?`,\r\n                sender: 'bot'\r\n            }]);\r\n        }\r\n    }, [user]);\r\n\r\n    // Automatically scroll to the latest message\r\n    useEffect(() => {\r\n        if (chatEndRef.current) {\r\n            chatEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages, isTyping]);\r\n\r\n    const sendMessage = async () => {\r\n        if (!input.trim()) return;\r\n\r\n        const userMessage = { \r\n            id: Date.now(), \r\n            text: input, \r\n            sender: 'user'\r\n        };\r\n        setMessages(prev => [...prev, userMessage]);\r\n        setInput(\"\");\r\n        setIsTyping(true);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/api/chat`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                credentials: 'include',\r\n                body: JSON.stringify({ message: input })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            const botMessage = { \r\n                id: Date.now() + 1, \r\n                text: data.reply, \r\n                sender: 'bot'\r\n            };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (error) {\r\n            console.error(\"Chat error:\", error);\r\n            const errorMsg = { \r\n                id: Date.now() + 1, \r\n                text: \"Sorry, I couldn't process your request. Please try again.\", \r\n                sender: 'bot'\r\n            };\r\n            setMessages(prev => [...prev, errorMsg]);\r\n        } finally {\r\n            setIsTyping(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-header\">\r\n                <div className=\"chat-header-avatar\">M</div>\r\n                <div className=\"chat-header-info\">\r\n                    <h2>MoodMate Assistant</h2>\r\n                    <p>Always here to listen</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-messages-container\" ref={messagesContainerRef}>\r\n                    {messages.map((msg) => (\r\n                        <div key={msg.id} className={`chat-message ${msg.sender}`}>\r\n                            <div className=\"message-content\">\r\n                                {msg.text}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    {isTyping && (\r\n                        <div className=\"chat-message bot\">\r\n                            <div className=\"typing-indicator\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <div ref={chatEndRef} className=\"scroll-anchor\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type your message...\"\r\n                    disabled={isTyping}\r\n                />\r\n                <button \r\n                    onClick={sendMessage} \r\n                    disabled={isTyping || !input.trim()}\r\n                    className=\"send-btn\"\r\n                >\r\n                    {isTyping ? '...' : 'âž¤'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}