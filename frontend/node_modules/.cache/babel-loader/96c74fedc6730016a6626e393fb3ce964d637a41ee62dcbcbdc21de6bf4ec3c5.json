{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhat singh\\\\Downloads\\\\Best_Project\\\\frontend\\\\src\\\\AppWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport App from \"./App\"; // Your main app component\nimport Auth from \"./Auth\"; // Your login/signup component\nimport \"./AppWrapper.css\"; // Your styles for the login screen\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppWrapper() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // On initial load, check if a user session is stored in localStorage\n    const storedUser = localStorage.getItem(\"moodmateUser\");\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        // If stored data is corrupted, clear it\n        localStorage.removeItem(\"moodmateUser\");\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  const handleLogin = userData => {\n    // This function is called by the Auth component on a successful login\n    setUser(userData);\n    localStorage.setItem(\"moodmateUser\", JSON.stringify(userData));\n  };\n  const handleLogout = () => {\n    // This function is passed to the main App component\n    setUser(null);\n    localStorage.removeItem(\"moodmateUser\");\n    // Optional: Notify the backend of logout to clear the server session\n    // fetch(`${API_BASE_URL}/logout`, { method: 'POST', credentials: 'include' });\n  };\n  if (isLoading) {\n    // Prevents a flicker of the login screen if the user is already logged in\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF19\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n\n  // This is the core logic:\n  // If a user object exists, show the main application.\n  // If not, show the authentication screen.\n  return user ? /*#__PURE__*/_jsxDEV(App, {\n    user: user,\n    onLogout: handleLogout\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Auth, {\n    onLogin: handleLogin\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(AppWrapper, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AppWrapper;\nexport default AppWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useEffect","App","Auth","jsxDEV","_jsxDEV","AppWrapper","_s","user","setUser","isLoading","setIsLoading","storedUser","localStorage","getItem","JSON","parse","error","removeItem","handleLogin","userData","setItem","stringify","handleLogout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogout","onLogin","_c","$RefreshReg$"],"sources":["C:/Users/Prabhat singh/Downloads/Best_Project/frontend/src/AppWrapper.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";      // Your main app component\r\nimport Auth from \"./Auth\";    // Your login/signup component\r\nimport \"./AppWrapper.css\"; // Your styles for the login screen\r\n\r\nfunction AppWrapper() {\r\n    const [user, setUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // On initial load, check if a user session is stored in localStorage\r\n        const storedUser = localStorage.getItem(\"moodmateUser\");\r\n        if (storedUser) {\r\n            try {\r\n                setUser(JSON.parse(storedUser));\r\n            } catch (error) {\r\n                // If stored data is corrupted, clear it\r\n                localStorage.removeItem(\"moodmateUser\");\r\n            }\r\n        }\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    const handleLogin = (userData) => {\r\n        // This function is called by the Auth component on a successful login\r\n        setUser(userData);\r\n        localStorage.setItem(\"moodmateUser\", JSON.stringify(userData));\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        // This function is passed to the main App component\r\n        setUser(null);\r\n        localStorage.removeItem(\"moodmateUser\");\r\n        // Optional: Notify the backend of logout to clear the server session\r\n        // fetch(`${API_BASE_URL}/logout`, { method: 'POST', credentials: 'include' });\r\n    };\r\n\r\n    if (isLoading) {\r\n        // Prevents a flicker of the login screen if the user is already logged in\r\n        return <div className=\"loading-screen\"><h1>ðŸŒ™</h1></div>;\r\n    }\r\n\r\n    // This is the core logic:\r\n    // If a user object exists, show the main application.\r\n    // If not, show the authentication screen.\r\n    return user ? (\r\n        <App user={user} onLogout={handleLogout} />\r\n    ) : (\r\n        <Auth onLogin={handleLogin} />\r\n    );\r\n}\r\n\r\nexport default AppWrapper;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO,CAAC,CAAM;AAC9B,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAI;AAC9B,OAAO,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIF,UAAU,EAAE;MACZ,IAAI;QACAH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZ;QACAJ,YAAY,CAACK,UAAU,CAAC,cAAc,CAAC;MAC3C;IACJ;IACAP,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,WAAW,GAAIC,QAAQ,IAAK;IAC9B;IACAX,OAAO,CAACW,QAAQ,CAAC;IACjBP,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEN,IAAI,CAACO,SAAS,CAACF,QAAQ,CAAC,CAAC;EAClE,CAAC;EAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACvB;IACAd,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACK,UAAU,CAAC,cAAc,CAAC;IACvC;IACA;EACJ,CAAC;EAED,IAAIR,SAAS,EAAE;IACX;IACA,oBAAOL,OAAA;MAAKmB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAACpB,OAAA;QAAAoB,QAAA,EAAI;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5D;;EAEA;EACA;EACA;EACA,OAAOrB,IAAI,gBACPH,OAAA,CAACH,GAAG;IAACM,IAAI,EAAEA,IAAK;IAACsB,QAAQ,EAAEP;EAAa;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAE3CxB,OAAA,CAACF,IAAI;IAAC4B,OAAO,EAAEZ;EAAY;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAChC;AACL;AAACtB,EAAA,CA7CQD,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AA+CnB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}