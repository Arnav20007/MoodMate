{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhat singh\\\\Downloads\\\\Best_Project\\\\frontend\\\\src\\\\components\\\\BreathingExercise.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './BreathingExercise.css'; // We will create this new CSS file\n\n// Audio cues (replace with your own high-quality sounds if you have them)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inhaleSound = new Audio('https://www.soundjay.com/buttons/sounds/button-16.mp3');\nconst exhaleSound = new Audio('https://www.soundjay.com/buttons/sounds/button-20.mp3');\nconst exercises = {\n  calm: {\n    name: 'Calm Breathing',\n    timings: {\n      inhale: 4000,\n      hold: 7000,\n      exhale: 8000\n    }\n  },\n  box: {\n    name: 'Box Breathing',\n    timings: {\n      inhale: 4000,\n      hold: 4000,\n      exhale: 4000,\n      hold_out: 4000\n    }\n  }\n};\nfunction BreathingExercise({\n  onClose\n}) {\n  _s();\n  const [isIntro, setIsIntro] = useState(true);\n  const [phase, setPhase] = useState('ready'); // ready, inhale, hold, exhale, hold_out\n  const [timer, setTimer] = useState(60);\n  const [selectedExercise, setSelectedExercise] = useState(exercises.calm);\n  const [selectedDuration, setSelectedDuration] = useState(60);\n  const timerRef = useRef(null);\n  const phaseTimerRef = useRef(null);\n  useEffect(() => {\n    if (!isIntro) {\n      // Start the countdown timer for the session\n      timerRef.current = setInterval(() => {\n        setTimer(prev => {\n          if (prev <= 1) {\n            clearInterval(timerRef.current);\n            stopExercise();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      runCycle(); // Start the first breathing cycle\n    }\n    return () => {\n      // Cleanup function\n      clearInterval(timerRef.current);\n      clearTimeout(phaseTimerRef.current);\n    };\n  }, [isIntro]);\n  const runCycle = () => {\n    const {\n      inhale,\n      hold,\n      exhale,\n      hold_out\n    } = selectedExercise.timings;\n    setPhase('inhale');\n    inhaleSound.play();\n    phaseTimerRef.current = setTimeout(() => {\n      setPhase('hold');\n      phaseTimerRef.current = setTimeout(() => {\n        setPhase('exhale');\n        exhaleSound.play();\n        if (hold_out) {\n          // For Box Breathing\n          phaseTimerRef.current = setTimeout(() => {\n            setPhase('hold_out');\n            phaseTimerRef.current = setTimeout(runCycle, hold_out);\n          }, exhale);\n        } else {\n          phaseTimerRef.current = setTimeout(runCycle, exhale);\n        }\n      }, hold);\n    }, inhale);\n  };\n  const stopExercise = () => {\n    clearTimeout(phaseTimerRef.current);\n    clearInterval(timerRef.current);\n    setPhase('finished');\n    setTimeout(onClose, 3000); // Close modal after a delay\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\n  };\n  const getPhaseText = () => {\n    switch (phase) {\n      case 'inhale':\n        return 'Breathe In...';\n      case 'hold':\n        return 'Hold';\n      case 'exhale':\n        return 'Breathe Out...';\n      case 'hold_out':\n        return 'Hold';\n      case 'finished':\n        return 'Well done.';\n      default:\n        return 'Ready?';\n    }\n  };\n  if (isIntro) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"breathing-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"breathing-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Breathing Exercise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setup-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Technique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setSelectedExercise(exercises[e.target.value]),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"calm\",\n              children: \"Calm (4-7-8)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"box\",\n              children: \"Box Breathing (4-4-4-4)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setup-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Duration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setSelectedDuration(parseInt(e.target.value)),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: 60,\n              children: \"1 Minute\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 180,\n              children: \"3 Minutes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 300,\n              children: \"5 Minutes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-breathing-btn\",\n          onClick: () => {\n            setTimer(selectedDuration);\n            setIsIntro(false);\n          },\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-breathing-btn\",\n          onClick: onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"breathing-overlay\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `breathing-visualizer ${phase}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"breathing-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"breathing-text\",\n        children: getPhaseText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"breathing-timer\",\n      children: formatTime(timer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close-breathing-btn\",\n      onClick: stopExercise,\n      children: \"End Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(BreathingExercise, \"qwn6zMDQButB9d1HaVSnhDFUgiA=\");\n_c = BreathingExercise;\nexport default BreathingExercise;\nvar _c;\n$RefreshReg$(_c, \"BreathingExercise\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","inhaleSound","Audio","exhaleSound","exercises","calm","name","timings","inhale","hold","exhale","box","hold_out","BreathingExercise","onClose","_s","isIntro","setIsIntro","phase","setPhase","timer","setTimer","selectedExercise","setSelectedExercise","selectedDuration","setSelectedDuration","timerRef","phaseTimerRef","current","setInterval","prev","clearInterval","stopExercise","runCycle","clearTimeout","play","setTimeout","formatTime","seconds","mins","Math","floor","secs","getPhaseText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","parseInt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Prabhat singh/Downloads/Best_Project/frontend/src/components/BreathingExercise.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './BreathingExercise.css'; // We will create this new CSS file\r\n\r\n// Audio cues (replace with your own high-quality sounds if you have them)\r\nconst inhaleSound = new Audio('https://www.soundjay.com/buttons/sounds/button-16.mp3');\r\nconst exhaleSound = new Audio('https://www.soundjay.com/buttons/sounds/button-20.mp3');\r\n\r\nconst exercises = {\r\n  calm: { name: 'Calm Breathing', timings: { inhale: 4000, hold: 7000, exhale: 8000 } },\r\n  box: { name: 'Box Breathing', timings: { inhale: 4000, hold: 4000, exhale: 4000, hold_out: 4000 } }\r\n};\r\n\r\nfunction BreathingExercise({ onClose }) {\r\n  const [isIntro, setIsIntro] = useState(true);\r\n  const [phase, setPhase] = useState('ready'); // ready, inhale, hold, exhale, hold_out\r\n  const [timer, setTimer] = useState(60);\r\n  const [selectedExercise, setSelectedExercise] = useState(exercises.calm);\r\n  const [selectedDuration, setSelectedDuration] = useState(60);\r\n\r\n  const timerRef = useRef(null);\r\n  const phaseTimerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!isIntro) {\r\n      // Start the countdown timer for the session\r\n      timerRef.current = setInterval(() => {\r\n        setTimer(prev => {\r\n          if (prev <= 1) {\r\n            clearInterval(timerRef.current);\r\n            stopExercise();\r\n            return 0;\r\n          }\r\n          return prev - 1;\r\n        });\r\n      }, 1000);\r\n      runCycle(); // Start the first breathing cycle\r\n    }\r\n    return () => { // Cleanup function\r\n      clearInterval(timerRef.current);\r\n      clearTimeout(phaseTimerRef.current);\r\n    };\r\n  }, [isIntro]);\r\n\r\n  const runCycle = () => {\r\n    const { inhale, hold, exhale, hold_out } = selectedExercise.timings;\r\n\r\n    setPhase('inhale');\r\n    inhaleSound.play();\r\n    phaseTimerRef.current = setTimeout(() => {\r\n      setPhase('hold');\r\n      phaseTimerRef.current = setTimeout(() => {\r\n        setPhase('exhale');\r\n        exhaleSound.play();\r\n        if (hold_out) { // For Box Breathing\r\n          phaseTimerRef.current = setTimeout(() => {\r\n            setPhase('hold_out');\r\n            phaseTimerRef.current = setTimeout(runCycle, hold_out);\r\n          }, exhale);\r\n        } else {\r\n          phaseTimerRef.current = setTimeout(runCycle, exhale);\r\n        }\r\n      }, hold);\r\n    }, inhale);\r\n  };\r\n\r\n  const stopExercise = () => {\r\n    clearTimeout(phaseTimerRef.current);\r\n    clearInterval(timerRef.current);\r\n    setPhase('finished');\r\n    setTimeout(onClose, 3000); // Close modal after a delay\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n  };\r\n\r\n  const getPhaseText = () => {\r\n    switch (phase) {\r\n      case 'inhale': return 'Breathe In...';\r\n      case 'hold': return 'Hold';\r\n      case 'exhale': return 'Breathe Out...';\r\n      case 'hold_out': return 'Hold';\r\n      case 'finished': return 'Well done.';\r\n      default: return 'Ready?';\r\n    }\r\n  };\r\n\r\n  if (isIntro) {\r\n    return (\r\n      <div className=\"breathing-overlay\">\r\n        <div className=\"breathing-setup\">\r\n          <h2>Breathing Exercise</h2>\r\n          <div className=\"setup-option\">\r\n            <label>Technique</label>\r\n            <select onChange={(e) => setSelectedExercise(exercises[e.target.value])}>\r\n              <option value=\"calm\">Calm (4-7-8)</option>\r\n              <option value=\"box\">Box Breathing (4-4-4-4)</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"setup-option\">\r\n            <label>Duration</label>\r\n            <select onChange={(e) => setSelectedDuration(parseInt(e.target.value))}>\r\n              <option value={60}>1 Minute</option>\r\n              <option value={180}>3 Minutes</option>\r\n              <option value={300}>5 Minutes</option>\r\n            </select>\r\n          </div>\r\n          <button className=\"start-breathing-btn\" onClick={() => { setTimer(selectedDuration); setIsIntro(false); }}>Start</button>\r\n          <button className=\"close-breathing-btn\" onClick={onClose}>Close</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"breathing-overlay\">\r\n      <div className={`breathing-visualizer ${phase}`}>\r\n        <div className=\"breathing-circle\"></div>\r\n        <p className=\"breathing-text\">{getPhaseText()}</p>\r\n      </div>\r\n      <div className=\"breathing-timer\">{formatTime(timer)}</div>\r\n      <button className=\"close-breathing-btn\" onClick={stopExercise}>End Session</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BreathingExercise;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}