{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhat singh\\\\Downloads\\\\Best_Project\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./app.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [showLogin, setShowLogin] = useState(true);\n  const [showRegister, setShowRegister] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"chat\");\n  const [therapists, setTherapists] = useState([]);\n  const [resources, setResources] = useState([]);\n  const [storeItems, setStoreItems] = useState([]);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [showCrisis, setShowCrisis] = useState(false);\n  const chatEndRef = useRef(null);\n  const API = \"http://localhost:5000/api\"; // CORS-safe\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const userData = localStorage.getItem(\"user\");\n    if (token && userData) {\n      setUser(JSON.parse(userData));\n      setIsLoggedIn(true);\n      setShowLogin(false);\n      loadInitialData();\n    }\n  }, []);\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const loadInitialData = () => {\n    setMessages([{\n      text: \"Hello! I'm MoodMate. How are you feeling today?\",\n      sender: \"bot\"\n    }]);\n  };\n  const handleLogin = async e => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const credentials = {\n      email: formData.get(\"email\"),\n      password: formData.get(\"password\")\n    };\n    const res = await fetch(`${API}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await res.json();\n    if (data.success) {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      setUser(data.user);\n      setIsLoggedIn(true);\n      setShowLogin(false);\n      loadInitialData();\n    } else alert(data.error);\n  };\n  const handleRegister = async e => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const userData = {\n      name: formData.get(\"name\"),\n      email: formData.get(\"email\"),\n      password: formData.get(\"password\")\n    };\n    const res = await fetch(`${API}/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await res.json();\n    if (data.success) {\n      alert(\"Registered! Login now.\");\n      setShowRegister(false);\n      setShowLogin(true);\n    } else alert(data.error);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setUser(null);\n    setIsLoggedIn(false);\n    setShowLogin(true);\n    setMessages([]);\n  };\n  const sendMessage = async () => {\n    if (!input.trim() || !isLoggedIn) return;\n    setMessages(prev => [...prev, {\n      text: input,\n      sender: \"user\"\n    }]);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const res = await fetch(`${API}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await res.json();\n      setMessages(prev => [...prev, {\n        text: data.response,\n        sender: \"bot\"\n      }]);\n      if (data.mood === \"crisis\") setShowCrisis(true);\n    } catch {\n      setMessages(prev => [...prev, {\n        text: \"Connection error.\",\n        sender: \"bot\"\n      }]);\n    }\n    setIsTyping(false);\n  };\n\n  // Other functions (journal, store, therapy) remain the same\n  // For brevity, you can keep your previous code\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"VxRyWGNUm9d/dgcKA1HodWFyvVg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","user","setUser","isLoggedIn","setIsLoggedIn","showLogin","setShowLogin","showRegister","setShowRegister","activeTab","setActiveTab","therapists","setTherapists","resources","setResources","storeItems","setStoreItems","isDarkMode","setIsDarkMode","showCrisis","setShowCrisis","chatEndRef","API","token","localStorage","getItem","userData","JSON","parse","loadInitialData","_chatEndRef$current","current","scrollIntoView","behavior","text","sender","handleLogin","e","preventDefault","formData","FormData","target","credentials","email","get","password","res","fetch","method","headers","body","stringify","data","json","success","setItem","alert","error","handleRegister","name","handleLogout","removeItem","sendMessage","trim","prev","message","response","mood","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Prabhat singh/Downloads/Best_Project/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport \"./app.css\";\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [showLogin, setShowLogin] = useState(true);\r\n  const [showRegister, setShowRegister] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(\"chat\");\r\n  const [therapists, setTherapists] = useState([]);\r\n  const [resources, setResources] = useState([]);\r\n  const [storeItems, setStoreItems] = useState([]);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [showCrisis, setShowCrisis] = useState(false);\r\n\r\n  const chatEndRef = useRef(null);\r\n\r\n  const API = \"http://localhost:5000/api\"; // CORS-safe\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const userData = localStorage.getItem(\"user\");\r\n    if (token && userData) {\r\n      setUser(JSON.parse(userData));\r\n      setIsLoggedIn(true);\r\n      setShowLogin(false);\r\n      loadInitialData();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const loadInitialData = () => {\r\n    setMessages([\r\n      { text: \"Hello! I'm MoodMate. How are you feeling today?\", sender: \"bot\" },\r\n    ]);\r\n  };\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target);\r\n    const credentials = { email: formData.get(\"email\"), password: formData.get(\"password\") };\r\n    const res = await fetch(`${API}/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    const data = await res.json();\r\n    if (data.success) {\r\n      localStorage.setItem(\"token\", data.token);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      setUser(data.user);\r\n      setIsLoggedIn(true);\r\n      setShowLogin(false);\r\n      loadInitialData();\r\n    } else alert(data.error);\r\n  };\r\n\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target);\r\n    const userData = {\r\n      name: formData.get(\"name\"),\r\n      email: formData.get(\"email\"),\r\n      password: formData.get(\"password\"),\r\n    };\r\n    const res = await fetch(`${API}/register`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    const data = await res.json();\r\n    if (data.success) {\r\n      alert(\"Registered! Login now.\");\r\n      setShowRegister(false);\r\n      setShowLogin(true);\r\n    } else alert(data.error);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    setUser(null);\r\n    setIsLoggedIn(false);\r\n    setShowLogin(true);\r\n    setMessages([]);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim() || !isLoggedIn) return;\r\n    setMessages((prev) => [...prev, { text: input, sender: \"user\" }]);\r\n    setInput(\"\");\r\n    setIsTyping(true);\r\n    try {\r\n      const res = await fetch(`${API}/chat`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n      const data = await res.json();\r\n      setMessages((prev) => [...prev, { text: data.response, sender: \"bot\" }]);\r\n      if (data.mood === \"crisis\") setShowCrisis(true);\r\n    } catch {\r\n      setMessages((prev) => [...prev, { text: \"Connection error.\", sender: \"bot\" }]);\r\n    }\r\n    setIsTyping(false);\r\n  };\r\n\r\n  // Other functions (journal, store, therapy) remain the same\r\n  // For brevity, you can keep your previous code\r\n\r\n  return <div>{/* Your full JSX here – same as your last App.jsx code */}</div>;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}